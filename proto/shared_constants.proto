/*
 * constants
 */
syntax = "proto3";

/*
 * States
 */
message State {
  /*
   * Enumeration of states
   */
  enum State {
    // unkown: no enough information to evaluate the state
    unknown = 0;

    // broken: unable to function because of error (default)
    broken = 1;

    // active: in function
    active = 2;

    // damaged: partially broken
    damaged = 3;

    // down: not in function
    down = 4;

    // healthy: functioning properly
    healthy = 5;

    // inactive: controller not active
    inactive = 6;

    // initializing: in intialization after start
    initializing = 7;

    // split: controller master but can not reach peer controller
    split = 8;

    // up: up but not in function
    up = 9;
  }
}

/*
 * LACP States
 */
message LacpState {
  /*
   * Enumeration of LACP states
   */
  enum LacpState {
    // default: startup state
    default = 0;

    // notlacp: the port is not configured as lacp
    none = -1;

    // init: port is initializing
    init = 1;

    // active: port is active lag port
    active = 3;

    // noact: port is up, but not active
    noact = 5;
  }
}

/*
 * DVA State
 */
message DVAState {
  /*
   * Enumeration of DVA states
   */
  enum State {
    // unassigned
    initial = 0;

    // unauthenticated
    unauthenticated = 1;

    // static
    static = 2;

    // sequestered
    sequestered = 3;

    // operational
    operational = 4;
  }
}

/*
 * LACP Roles
 */
message LacpRole {
  /*
   * Enumeration of LACP roles
   */
  enum LacpRole {
    // default: startup state
    default = 0;

    // notlacp: the port is not configured as lacp
    none = -1;

    // unselected: port is not a lacp port on the nominated DP
    unselected = 1;

    // selected: port is a lacp port on nominated DP, will send/receive
    selected = 2;

    // standby: port is a lacp port that is on standby
    standby = 3;
  }
}

/*
 * Port types
 */
message PortType {
  enum Type {
    // unknown
    unknown = 0;

    // access
    access = 1;

    // testing
    testing = 2;

    // other
    other = 3;
  }
}

/*
 * Port behaviors
 */
message PortBehavior {
  enum Behavior {
    // unknown
    unknown = 0;

    // authenticated
    authenticated = 1;

    // cleared
    cleared = 2;

    // sequestered
    sequestered = 3;

    // passed testing
    passed = 4;

    // failed testing
    failed = 5;
  }
}

/*
 * Dummy empty message
 */
message Empty {}
