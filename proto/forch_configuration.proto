/*
 * Encapsulating Forch configuration
 */
syntax = "proto3";

// TODO fill up sections one by one
/*
 * Forch configuration
 */
message ForchConfig {
  // configuration for site
  SiteConfig site = 1;

  // configuration for orchestration
  OrchestrationConfig orchestration = 2;

  // configuration for process monitoring
  ProcessConfig process = 3;

  // configuration for api http server
  HttpConfig http = 4;

  // configuration for faucet events
  EventClientConfig event_client = 5;

  // configuration for varz interface
  VarzInterfaceConfig varz_interface = 6;

  // configuration for port proxy server
  ProxyServerConfig proxy_server = 7;

  // configuration for switches monitoring
  DataplaneMonitoring dataplane_monitoring = 8;

  // configuration for control plane network monitoring
  CpnMonitoring cpn_monitoring = 9;
}

/*
 * Site section in Forch configuration
 */
message SiteConfig {
  // site name
  string name = 1;

  // controllers indexed by controller host name
  map<string, Controller> controllers = 2;

  // Representing a controller host
  message Controller {
    // fqdn
    string fqdn = 1;

    // port for Forch APIs
    int32 port = 2;
  }
}

/*
 * Orchestration section in Forch configuration
 */
message OrchestrationConfig {
  // structural config file name
  string structural_config_file = 1;

  // VLAN for unauthenticated devices
  int32 unauthenticated_vlan = 8;

  // Name of the optional tail ACL to add to host ports
  string tail_acl = 9;

  // behavioral config file name
  string behavioral_config_file = 2;

  // static placement file name
  string static_device_placement = 3;

  // static behavior file name
  string static_device_behavior = 4;

  // segment to vlan mappings file name
  string segments_vlans_file = 5;

  // name of gauge config file
  string gauge_config_file = 10;

  // interval of periodic faucetizing task in seconds.
  // NB: no value or setting to 0 indicates instant faucetizing
  int32 faucetize_interval_sec = 6;

  // authentication configurations
  AuthConfig auth_config = 7;

  // device sequestration configurations
  SequesterConfig sequester_config = 11;

  // encapsulating authentication configurations
  message AuthConfig {
    // Radius configurations
    RadiusInfo radius_info = 1;

    // Heartbeat in seconds
    int32 heartbeat_sec = 2;

    // Max Radius backoff count
    int32 max_radius_backoff = 3;

    // Query timeout in seconds
    int32 query_timeout_sec = 4;

    // Reject timeout in seconds
    int32 reject_timeout_sec = 5;

    // Authentication timeout in seconds
    int32 auth_timeout_sec = 6;
  }

  // encapsulating Radius configurations
  message RadiusInfo {
    // Radius server IP
    string server_ip = 1;

    // Radius server port
    int32 server_port = 2;

    // Shell command to get RADIUS secret. Can be as simple as 'echo <secret>'
    string radius_secret_helper = 3;

    // Port to listen on for RADIUS responses
    int32 source_port = 4;
  }

  // encapsulating device sequestration configurations
  message SequesterConfig {
    // segment. If defined, automatic sequestering is enabled
    string segment = 1;

    // start of vlan range
    int32 vlan_start = 2;

    // end of vlan range
    int32 vlan_end = 3;

    // identifier of testing host port in the port description
    string port_description = 4;

    // port on which the grpc server receives testing result
    int32 grpc_server_port = 5;
  }
}

/*
 * Process section in Forch configuration
 */
message ProcessConfig {
  // scan interval in seconds
  int32 scan_interval_sec = 1;

  // indicate if Forch should check VRRP state
  bool check_vrrp = 2;

  // target processes to check indexed by process name
  map<string, Process> processes = 3;

  // connections to check indexed by listening port number
  map<int32, Connection> connections = 4;

  // representing a target process
  message Process {
    // regex to match process name
    string regex = 1;

    // count of instances of a target process
    int32 count = 2;

    // CPU percent threshold
    float cpu_percent_threshold = 3;
  }

  // Connection
  message Connection {
    // description
    string description = 1;
  }
}

/*
 * Http section in Forch configuration
 */
message HttpConfig {
  // http root directory
  string http_root = 1;
}

/*
 * Event client section in Forch configuration
 */
message EventClientConfig {
  // port debounce time in seconds
  int32 port_debounce_sec = 1;

  // coalesce stack topo events to reduce churn
  int32 stack_topo_change_coalesce_sec = 2;

  // timeout for config hash verification
  int32 config_hash_verification_timeout_sec = 3;
}

/*
 * Varz interface section in Forch configuration
 */
message VarzInterfaceConfig {
  // port number for forch varz
  int32 varz_port = 1;
}

/*
 * Proxy server config
 */
message ProxyServerConfig {
  // port number for proxy server
  int32 proxy_port = 1;

  // map of targets with path prefix as key
  map<string, ProxyTarget> targets = 2;
}

/*
 * Proxy targets
 */
message ProxyTarget {
  // port number for target
  int32 port = 1;
}

/*
 * Monitoring for dataplane
 */
message DataplaneMonitoring {
  // vlan packet rate polling interval in seconds
  int32 gauge_metrics_interval_sec = 1;

  // threshold of number of packets per second for each vlan; indexed by vlan
  map<int32, int32> vlan_pkt_per_sec_thresholds = 2;
}

/*
 * Monitoring for control plane network
 */
message CpnMonitoring {
  // interval of the periodic ping task
  int32 ping_interval = 1;

  // minimum count of consecutive successful pings to determine healthy state
  int32 min_consecutive_ping_healthy = 2;

  // minimum count of consecutive unsuccessful pings to determine down state
  int32 min_consecutive_ping_down = 3;
}
