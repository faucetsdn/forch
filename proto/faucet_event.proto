/*
 * Encapsulation of an event on the Faucet event socket.
 */
syntax = "proto3";

import "forch/proto/shared_constants.proto";

message FaucetEvent {
  int32 version = 1;
  float time = 2;
  string dp_name = 3;
  int64 dp_id = 4;
  int32 event_id = 5;
  bool debounced = 6;

  oneof event_data {
    ConfigChange CONFIG_CHANGE = 10;
    DpChange DP_CHANGE = 11;
    LagChange LAG_CHANGE = 7;
    StackState STACK_STATE = 9;
    StackTopoChange STACK_TOPO_CHANGE = 8;
    PortChange PORT_CHANGE = 12;
    L2Learn L2_LEARN = 13;
    L2Expire L2_EXPIRE = 14;
  }
}

message LagChange {
  float timestamp = 1;
  string dp_name = 2;
  int32 port_no = 3;
  int32 state = 4;
  int32 role = 5;
}


/*
 * Event representing a stacking link state change.
 */
message StackState {
  // event timestamp
  float timestamp = 1;

  // dataplane name
  string dp_name = 2;

  // switch port number
  int32 port = 3;

  // stack link state
  State.State state = 4;
}


message StackTopoChange {
  float timestamp = 1;
  string stack_root = 2;
  StackGraph graph = 3;
  map<string, StackDp> dps = 4;

  message StackGraph {
    bool directed = 1;
    bool multigraph = 2;
    NetworkGraph graph = 3;
    repeated StackNode nodes = 4;
    repeated StackLink links = 5;
  }

  message NetworkGraph {
  }

  message StackNode {
    string id = 1;
  }

  message StackLink {
    string key = 1;
    string source = 2;
    string target = 3;
    LinkPortMap port_map = 4;
  }

  message LinkPortMap {
    string dp_a = 1;
    string port_a = 2;
    string dp_z = 3;
    string port_z = 4;
  }

  message StackDp {
    int32 root_hop_port = 1;
  }
}

/*
 * Event representing config change
 */
message ConfigChange {
  // event timestamp
  float timestamp = 1;

  // datapath name
  string dp_name = 2;

  // restart type
  string restart_type = 3;

  // datapath id
  string dp_id = 4;

  // success
  bool success = 5;

  // config hash
  ConfigHashInfo config_hash_info = 6;

  // Config hash info: will be included in the event
  // in case of faucet configuration changes
  message ConfigHashInfo {
    // config files
    string config_files = 1;

    // config hashes
    string hashes = 2;

    // error
    string error = 3;
  }
}

/*
 * Event representing dp change
 */
message DpChange {
  // event timestamp
  float timestamp = 1;

  // datapath name
  string dp_name = 2;

  // reason
  string reason = 3;
}

/*
 * Event representing port change
 */
message PortChange {
  // event timestamp
  float timestamp = 1;

  // datapath name
  string dp_name = 2;

  // datapath id
  string dp_id = 3;

  // datapath port number
  int32 port_no = 4;

  // reason
  string reason = 5;

  // port status
  bool status = 6;
}

/*
 * Event representing l2 learn
 */
message L2Learn {
  // event timestamp
  float timestamp = 1;

  // datapath name
  string dp_name = 2;

  // datapath id
  string dp_id = 3;

  // datapath port number
  int32 port_no = 4;

  // eth src MAC
  string eth_src = 5;

  // eth src IP
  string l3_src_ip = 6;
}

/*
 * Event representing l2 expire
 */
message L2Expire {
  // event timestamp
  float timestamp = 1;

  // datapath name
  string dp_name = 2;

  // datapath id
  string dp_id = 3;

  // datapath port number
  int32 port_no = 4;

  // eth src MAC
  string eth_src = 5;

  // vlan id
  int32 vid = 6;
}
