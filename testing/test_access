#!/bin/bash

source bin/stack_functions

preamble_setup

export CONTROLLER_NAME=127.0.0.1

FAUCET_VARZ_PORT=8001
FORCH_VARZ_PORT=8302

function send_udp {
    container=$1
    addr=$2
    count=$3
    interval=${4:-1}

    for i in $(seq 1 $count); do
        echo Send udp from $container to $addr, $i/$count...
        docker exec $container bash -c "echo -n 'abc' > /dev/udp/$addr"
        sleep $interval
    done
}

function test_access {
    adesc=access-$1
    echo Starting $adesc test... | tee -a $TEST_RESULTS
    metrics=$(wget localhost:$FAUCET_VARZ_PORT -O- 2>/dev/null)
    grep 'nz-kiwi-t2sw1' <<< $metrics | grep -F 'vid="100"' | grep -F ' 1.0' | grep -oF '9a:02:57:1e:8f:01' | tee -a $TEST_RESULTS
    grep 'nz-kiwi-t2sw2' <<< $metrics | grep -F 'vid="300"' | grep -F ' 1.0' | grep -oF '9a:02:57:1e:8f:02' | tee -a $TEST_RESULTS
    grep 'nz-kiwi-t2sw3' <<< $metrics | grep -F 'vid="300"' | grep -F ' 1.0' | grep -oF '9a:02:57:1e:8f:03' | tee -a $TEST_RESULTS
}

function test_dva {
    fdesc=dva-$1
    fout_dir=$OUT_DIR/$fdesc
    mkdir -p $fout_dir

    echo Starting $fdesc tests | tee -a $TEST_RESULTS
    echo $fout_dir
    fetch_forch sys_config
    fetch_forch dataplane_state
    fetch_forch switch_state
    fetch_forch list_hosts

    api_result=$fout_dir/sys_config.json
    echo "@sys_config $fdesc" | tee -a $TEST_RESULTS
    jq '.faucet.structural.dps."nz-kiwi-t2sw1".interfaces."1".max_hosts' $api_result | tee -a $TEST_RESULTS
    jq '.faucet.behavioral.dps."nz-kiwi-t2sw2".interfaces."1".acls_in[0]' $api_result | tee -a $TEST_RESULTS
    jq '.faucet.behavioral.dps."nz-kiwi-t2sw3".interfaces."1".native_vlan' $api_result | tee -a $TEST_RESULTS
    jq '.faucet.behavioral.dps."nz-kiwi-t2sw3".interfaces."1".acls_in[0]' $api_result | tee -a $TEST_RESULTS

    api_result=$fout_dir/dataplane_state.json
    echo "@dataplane_state $fdesc" | tee -a $TEST_RESULTS
    jq '.dataplane_state' $api_result | tee -a $TEST_RESULTS
    jq '.vlans."100".packet_rate_state' $api_result | tee -a $TEST_RESULTS
    jq '.vlans."200".packet_rate_state' $api_result | tee -a $TEST_RESULTS
    jq '.vlans."500".packet_rate_state' $api_result | tee -a $TEST_RESULTS
    jq '.vlans."4096".packet_rate_state' $api_result | tee -a $TEST_RESULTS

    api_result=$fout_dir/switch_state.json
    echo "@switch_state $fdesc" | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t2sw1".ports."1".vlan' $api_result | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t2sw1".ports."1".dva_state' $api_result | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t2sw1".vlans."100".acls[0].rules[0].description' $api_result | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t2sw2".ports."1".dva_state' $api_result | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t2sw3".ports."1".vlan' $api_result | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t2sw3".ports."1".dva_state' $api_result | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t2sw3".ports."1".acls[0].rules[0].description' $api_result | tee -a $TEST_RESULTS
    jq '.switches."nz-kiwi-t2sw3".ports."1".acls[0].rules[0].packet_count' $api_result | tee -a $TEST_RESULTS

    api_result=$fout_dir/list_hosts.json
    echo "@list_hosts $fdesc" | tee -a $TEST_RESULTS
    jq '.eth_srcs."9a:02:57:1e:8f:01".vlan' $api_result | tee -a $TEST_RESULTS
    jq '.eth_srcs."9a:02:57:1e:8f:01".dva_state' $api_result | tee -a $TEST_RESULTS
    jq '.eth_srcs."9a:02:57:1e:8f:01".acls[0].rules[0].description' $api_result | tee -a $TEST_RESULTS
    jq '.eth_srcs."9a:02:57:1e:8f:03".vlan' $api_result | tee -a $TEST_RESULTS
    jq '.eth_srcs."9a:02:57:1e:8f:03".dva_state' $api_result | tee -a $TEST_RESULTS
    jq '.eth_srcs."9a:02:57:1e:8f:03".radius_result.access' $api_result | tee -a $TEST_RESULTS
    jq '.eth_srcs."9a:02:57:1e:8f:03".radius_result.segment' $api_result | tee -a $TEST_RESULTS
    jq '.eth_srcs."9a:02:57:1e:8f:03".radius_result.role' $api_result | tee -a $TEST_RESULTS
    jq '.eth_srcs."9a:02:57:1e:8f:03".acls[0].rules[0].packet_count' $api_result | tee -a $TEST_RESULTS
}

function test_forch_varz {
    adesc=varz-$1
    echo Starting $adesc test... | tee -a $TEST_RESULTS
    metrics=$(wget localhost:$FORCH_VARZ_PORT -O- 2>/dev/null)
    grep 'dataplane_packet_rate_state_vlan' <<< $metrics | grep 'vlan="100"' | awk '{print $2}' | tee -a $TEST_RESULTS
    grep 'dataplane_packet_rate_state_vlan' <<< $metrics | grep 'vlan="200"' | awk '{print $2}' | tee -a $TEST_RESULTS
    grep 'dataplane_packet_rate_state_vlan' <<< $metrics | grep 'vlan="500"' | awk '{print $2}' | tee -a $TEST_RESULTS
    grep 'dataplane_packet_rate_state_vlan' <<< $metrics | grep 'vlan="4096"' | awk '{print $2}' | tee -a $TEST_RESULTS

    grep 'dataplane_packet_count_vlan' <<< $metrics | grep 'vlan="300"' | awk '{print $2}' | tee -a $TEST_RESULTS
    vlan_4096_count=$(grep 'dataplane_packet_count_vlan' <<< $metrics | grep 'vlan="4096"' | awk '{print $2}')
    echo $((${vlan_4096_count%.0} > 40)) | tee -a $TEST_RESULTS
}

echo %%% initial | tee -a $TEST_RESULTS
test_access initial

# device are on default VLAN where only DHCP discover/request can go through
echo %%% minimal-learning | tee -a $TEST_RESULTS
docker exec forch-faux-1 arp -s 192.168.1.254 02:00:00:00:00:00
docker exec forch-faux-2 arp -s 192.168.1.254 02:00:00:00:00:00
docker exec forch-faux-3 arp -s 192.168.1.254 02:00:00:00:00:00
send_udp forch-faux-1 "192.168.1.254/67" 5
send_udp forch-faux-2 "192.168.1.254/68" 5
sleep 10
test_access minimal-learning

stop_and_cleanup_radius
start_radius_server
docker ps
restart_forch

# vlan and role is assigned for faux-1
# trigger ARP and UDP traffic from faux-2 and faux-3 for mac learning
echo %%% vlan-assigned | tee -a $TEST_RESULTS
send_udp forch-faux-2 "192.168.1.253/68" 5
send_udp forch-faux-3 "192.168.1.254/67" 5
tail -f inst/forch-faucet-1/forch.log &

validate_radius_varz

echo Waiting for RADIUS result
sleep 65
send_udp forch-faux-3 "192.168.1.2/68" 1200 0.5 &
send_pid=$!
sudo tcpdump -ni faux-2 &
sleep 20

test_access vlan-assigned
test_dva vlan-assigned
test_forch_varz vlan-assigned

kill $send_pid
stop_and_cleanup_radius
