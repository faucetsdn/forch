#!/bin/bash

source bin/stack_functions

preamble_setup

local=
if [ "$1" == local ]; then
    local=y
    shift
fi

bridges=$(sudo ovs-vsctl show | fgrep Bridge | wc -l)
if [ $bridges != 6 ]; then
    echo System misconfiguration: found $bridges bridges, expected 6.
    exit 2
fi

containers=$(docker ps  | fgrep forch- | wc -l)
if [ $containers != 7 ]; then
    echo System misconfiguration: found $containers containers, expected 7.
    exit 2
fi

cap_base=10
ping_count=10
num_pairs=12
cap_length=$((cap_base + ping_count + num_pairs * 2))

faucet_log=inst/forch-faucet-1/faucet.log
forch_log=inst/forch-faucet-1/forch.log

#################################################################################

echo Capturing $faucet_log...
rm -f $faucet_log
tail --retry -f $faucet_log &

reset_system

reset_stack

# Test that the 'local' mode of faucet is working properly.
echo 'print("supercalifragilisticexpialidocious")' > faucet/faucet/python_test.py
docker exec forch-faucet-1 python -m faucet.python_test 2>&1 | tee -a $TEST_RESULTS
rm faucet/faucet/python_test.py

# Initial state is slightly broken with one egress link down.
sudo ip link set t1sw2-eth28 down
sleep 10

curl -s http://localhost:8001 > $OUT_DIR/faucet_varz.txt
fgrep 'port_lacp_state{' $OUT_DIR/faucet_varz.txt | sort | tee -a $TEST_RESULTS

restart_forch

# Basic one-time test of web-server and config
curl http://$CONTROLLER_NAME:9019/index.html > $OUT_DIR/index.html
fgrep "Network Operations Administrative Helper" $OUT_DIR/index.html || exit 1
curl http://$CONTROLLER_NAME:9019/protos.html > $OUT_DIR/protos.html
fgrep "forch/proto/system_state.proto" $OUT_DIR/protos.html || exit 1
curl http://$CONTROLLER_NAME:9019/sys_config > $OUT_DIR/sys_config.json
jq '.faucet.behavioral.dps."nz-kiwi-t2sw3"'.faucet_dp_mac $OUT_DIR/sys_config.json | tee -a $TEST_RESULTS
jq '.faucet.warnings.faucet_dp_mac' $OUT_DIR/sys_config.json | tee -a $TEST_RESULTS
jq '.ryu.echo_request_interval' $OUT_DIR/sys_config.json | tee -a $TEST_RESULTS
test_varz_value faucet_config_warning_count 8302 forch

echo %%% initial solid state | tee -a $TEST_RESULTS
test_stack -solid
test_forch -solid

reset_stack

echo %%% healthy state | tee -a $TEST_RESULTS
sudo ip addr add 240.0.0.1/24 dev lo
sudo ip addr add 240.0.0.2/24 dev lo
sudo ip addr add 240.0.0.253/24 dev lo
sleep 50.3231 &
sleep $STABILIZE_SEC
test_forch -healthy
test_varz_value process_state{process=\"faucet\"} 8302
test_varz_value process_state{process=\"gauge\"} 8080 forch
test_varz_value process_state{process=\"forch\"} 8080 forch
test_varz_value process_state{process=\"sleep\"} 8080 forch
test_varz_value process_state{process=\"sleep\"} 8080 jkdhfgjksdhg

echo %%% t2sw3 down, cpn nz-kiwi-ctl1 up, t1sw1-eth9 down | tee -a $TEST_RESULTS
sudo ovs-vsctl del-controller t2sw3
sudo ip addr add 240.0.0.253/24 dev lo
sudo ip link set t1sw1-eth9 down
test_stack -linkd

curl -s http://localhost:8001 > $OUT_DIR/faucet_varz.txt
fgrep 'port_lacp_state{' $OUT_DIR/faucet_varz.txt | sort | tee -a $TEST_RESULTS

echo %%% t1sw1-eth10 down | tee -a $TEST_RESULTS
sudo ip link set t1sw2-eth10 down
test_stack -twod
sleep 50.3231 &
sleep $STABILIZE_SEC
test_forch -twod

echo %%% steady state ip address check | tee -a $TEST_RESULTS
api_result=$OUT_DIR/forch-twod/host_path2.json
jq '.src_ips[0]' $api_result | tee -a $TEST_RESULTS
jq '.dst_ips[0]' $api_result | tee -a $TEST_RESULTS

echo %%% t2sw3 up, cpn nz-kiwi-t2sw2 up, t1sw1-eth6 down, t1sw1-eth11 down | tee -a $TEST_RESULTS
sudo ovs-vsctl set-controller t2sw3 $CONTROLLER_IDS
sudo ip addr add 240.0.0.1/24 dev lo
sudo ip link set t1sw2-eth28 down
sudo ip link set t1sw1-eth6 down
sudo ip link set t1sw1-eth11 down
test_stack -broken
test_forch -broken

echo %%% cpn t2sw2 down, t1sw1:10 down, t1sw2:10 up, t1sw1:6 up, t2sw3 swapped | tee -a $TEST_RESULTS
sudo ip addr add 240.0.0.2/24 dev lo
sudo ip link set t1sw1-eth10 down
sudo ip link set t1sw2-eth10 up
sudo ip link set t1sw1-eth6 up
del_link t1sw1 11 t2sw3 50
del_link t1sw2 11 t2sw3 52
add_link t1sw1 11 t2sw3 52
add_link t1sw2 11 t2sw3 50
test_stack -restored
test_forch -restored

echo %%% orphaned t1sw1 | tee -a $TEST_RESULTS
reset_stack

# TODO: Make this switch roots without explicitly bringing the egress link down.
sudo ip link set t1sw1-eth28 down
sleep $STABILIZE_SEC
sudo ip link set t1sw1-eth6 down
sudo ip link set t1sw1-eth9 down
sudo ip link set t1sw1-eth10 down
sudo ip link set t1sw1-eth11 down
sleep $STABILIZE_SEC
sudo ip link set t1sw1-eth28 up
sleep $STABILIZE_SEC

test_stack -orphaned
test_forch -orphaned

echo %%% reset stack | tee -a $TEST_RESULTS
restart_ovs
reset_stack
sudo ip link set t2sw3-eth50 down
sudo ip link set t2sw3-eth52 down
sleep $STABILIZE_SEC
test_forch -reset

echo %%% restarting Forch | tee -a $TEST_RESULTS
restart_forch
sleep $STABILIZE_SEC
test_forch -restart

echo Killing forch...
sudo kill `ps ax | fgrep forch | awk '{print $1}'`

echo Killing tails...
kill `ps ax | fgrep $faucet_log | fgrep -v fgrep | awk '{print $1}'`
kill `ps ax | fgrep $forch_log | fgrep -v fgrep | awk '{print $1}'`

echo Done with test_stack.
