#!/bin/bash -e

ROOT=$(realpath $(dirname $0)/..)
CONTAINER=forch-controller
INSTDIR=$ROOT/inst
IMAGE=forch/controller
PROM_TARGET=9302
GAUGE_PROM_TARGET=9303
FAUCET_SOCK=faucet_event.sock
FAUCET_CONFIG=faucet.yaml
SYSTEM_CONF=system.conf
LOCAL_CONFIG=local/$SYSTEM_CONF

ext_ofpt=6653
gauge_ext_ofpt=6654
prom_pt=9302
gauge_prom_pt=9303

docker_volumes=
port_opts=
local=
faucet_id=

cd $ROOT

if [ "$1" == "local" ]; then
    docker_volumes+=" -v $ROOT/faucet/faucet:/usr/lib/python3.7/site-packages/faucet"
    local=local
    shift
fi

if [ -n "$1" ]; then
    CONTAINER=$CONTAINER-$1
    INSTDIR=$INSTDIR/$CONTAINER
    faucet_id=$1
    shift
fi

if [ -n "$1" ]; then
    ext_ofpt=$1
    shift
fi

if [ -n "$1" ]; then
    prom_pt=$1
    shift
fi

if [ -n "$1" ]; then
    gauge_ext_ofpt=$1
    shift
fi

if [ -n "$1" ]; then
    gauge_prom_pt=$1
    shift
fi

echo Creating $IMAGE instance $CONTAINER on port $ext_ofpt in $INSTDIR

# Check that image exists so docker doesn't pull down random one from dockerhub
docker inspect $IMAGE > /dev/null

mkdir -p $INSTDIR

if docker container inspect $CONTAINER --format '{{ .Name }}' > /dev/null 2>&1; then
    echo -n "Clensing old container "
    docker rm -f $CONTAINER
fi

if [ -n "$FAUCET_SOCK" ]; then
    rm -f $INSTDIR/$FAUCET_SOCK
    event_sock=/var/log/faucet/$FAUCET_SOCK
fi

faucet_config=/etc/faucet/$FAUCET_CONFIG

if [ -n "$local" ]; then
    using_faucet=$(cd faucet; git rev-list -n 1 `git describe --dirty`) || using_faucet=dev
    error_label="from local faucet/"
    echo Using local faucet version $using_faucet
else
    using_faucet=`docker inspect $IMAGE | jq -r .[0].Config.Labels.FAUCET_HASH`
    error_label="from image $IMAGE"

    expected_faucet=$(cat etc/FAUCET_VERSION)

    using_hash=`cd faucet; git rev-list -n 1 $using_faucet`
    expected_hash=`cd faucet; git rev-list -n 1 $expected_faucet`
    if [ "$using_hash" != "$expected_hash" ]; then
	echo Image faucet version does not match configuration.
	echo $using_hash $error_label $using_faucet
	echo $expected_hash from etc/FAUCET_VERSION $expected_faucet
	false
    fi
fi

docker_envs="\
        --env FAUCET_CONFIG_STAT_RELOAD=1 \
        --env GAUGE_CONFIG_STAT_RELOAD=1 \
        --env FAUCET_EVENT_SOCK_HEARTBEAT=10 \
        --env USERID=$(id -u) \
        --env FAUCET_EVENT_SOCK=$event_sock \
        --env FAUCET_CONFIG=$faucet_config \
        --env FAUCET_LISTEN_PORT=6653 \
        --env FAUCET_RYU_CONF=/etc/faucet/ryu.conf"

docker_volumes+="\
        -v $INSTDIR/faucet_br/faucet:/etc/faucet_br \
        -v $INSTDIR/faucet_br:/var/log/faucet_br \
        -v $INSTDIR/faucet:/etc/faucet \
        -v $INSTDIR:/var/log/faucet \
        -v $INSTDIR/daq/local:/root/daq/local \
        -v $INSTDIR/daq/inst:/root/daq/inst"


if [ -n "$prom_pt" ]; then
    port_opts="-p $prom_pt:$PROM_TARGET"
    echo $prom_pt > $INSTDIR/PROM_PORT.$PROM_TARGET
fi

if [ -n "$gauge_prom_pt" ]; then
    gauge_port_opts="-p $gauge_prom_pt:$GAUGE_PROM_TARGET"
    echo $gauge_prom_pt > $INSTDIR/PROM_PORT.$GAUGE_PROM_TARGET
fi

forch_port="-p 500$faucet_id:9019"
docker_envs+="\
    --env CONTROLLER_NAME=$CONTAINER \
    --env PROMETHEUS_PORT=9302 \
    --env FAUCET_EVENT_SOCK=/var/log/faucet/faucet_event.sock \
    --env FAUCET_CONFIG_DIR=/etc/faucet \
    --env FORCH_CONFIG_DIR=/etc/faucet \
    --env WSAPI_LISTEN_HOST=localhost \
    --env WSAPI_LISTEN_PORT=4000 \
    --env GAUGE_RYU_CONF=/etc/faucet/ryu.conf \
    --env GAUGE_LISTEN_PORT=6654 \
    --env GAUGE_CONFIG=/etc/faucet/gauge.yaml \
    --env GAUGE_LOG=/var/log/faucet/gauge.log \
    --env GAUGE_EXCEPTION_LOG=/var/log/faucet/gauge_exception.log \
    --env GAUGE_CONFIG_STAT_RELOAD=1 \
    --env FORCH_LOG_DIR=/var/log/faucet"

cid=$(docker run -d --privileged --name $CONTAINER \
             $docker_volumes $docker_envs \
             -p $ext_ofpt:6653 $forch_port $port_opts $gauge_port_opts -p $gauge_ext_ofpt:6654 $IMAGE)

if [ $IMAGE == "forch/controller" ] && [[ $faucet_id =~ ^[0-9]+$ ]]; then
    for file in $INSTDIR/forch/*; do docker cp $file $CONTAINER:/etc/faucet/; done
    # docker exec $CONTAINER /usr/bin/gauge --ryu-config-file=${GAUGE_RYU_CONF} --ryu-ofp-tcp-listen-port=${GAUGE_LISTEN_PORT} --ryu-wsapi-host=${WSAPI_LISTEN_HOST} --ryu-wsapi-port=${WSAPI_LISTEN_PORT} --ryu-app=ryu.app.ofctl_rest &
    pid=$(docker inspect --format="{{ .State.Pid }}" $cid)
    tap_intf_name=cntrl_tap_$faucet_id
    sudo ip link add $tap_intf_name type veth peer name data0 netns $pid
    sudo ip link set $tap_intf_name up
    docker exec $CONTAINER ip addr add 192.168.2.$faucet_id dev data0
    docker exec $CONTAINER ip link set data0 up
fi

echo Container $CONTAINER started as $cid

while [ -n "$FAUCET_SOCK" -a ! -e $INSTDIR/$FAUCET_SOCK ]; do
    status=`docker inspect $CONTAINER | jq -r '.[0].State.Status'`
    if [ "$status" != running ]; then
       echo Faucet docker container $CONTAINER not running, is $status
       false
    fi
    echo Waiting for $INSTDIR/$FAUCET_SOCK to exist...
    sleep 10
done
