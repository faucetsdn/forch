#!/bin/bash -e

ROOT=$(realpath $(dirname $0)/..)
CONTAINER=forch-controller
INSTDIR=$ROOT/inst
IMAGE=forch/controller
PROM_TARGET=9302
GAUGE_PROM_TARGET=9303
FAUCET_SOCK=faucet_event.sock
SYSTEM_CONF=system.conf
LOCAL_CONFIG=local/$SYSTEM_CONF

ext_ofpt=6653
gauge_ext_ofpt=6654
prom_pt=9302
gauge_prom_pt=9303

docker_volumes=
port_opts=
local=
run_mode=
faucet_id=
vxlan=

echo run_controller $@
cd $ROOT

if [ "$1" == "local" ]; then
    docker_volumes+=" -v $ROOT/faucet/faucet:/usr/lib/python3.7/site-packages/faucet"
    local=local
    shift
fi

if [ "$1" == "static_switch" ]; then
    run_mode=static_switch
    shift
fi

if [ "$1" == "vxlan" ]; then
    vxlan=vxlan
    shift
fi

if [ -n "$1" ]; then
    CONTAINER=$CONTAINER-$1
    INSTDIR=$INSTDIR/$CONTAINER
    faucet_id=$1
    shift
fi

if [ -n "$1" ]; then
    ext_ofpt=$1
    shift
fi

if [ -n "$1" ]; then
    prom_pt=$1
    shift
fi

if [ -n "$1" ]; then
    gauge_ext_ofpt=$1
    shift
fi

if [ -n "$1" ]; then
    gauge_prom_pt=$1
    shift
fi

echo Creating $IMAGE instance $CONTAINER on port $ext_ofpt in $INSTDIR

# Check that image exists so docker doesn't pull down random one from dockerhub
docker inspect $IMAGE > /dev/null

mkdir -p $INSTDIR

if docker container inspect $CONTAINER --format '{{ .Name }}' > /dev/null 2>&1; then
    echo -n "Clensing old container "
    docker rm -f $CONTAINER
fi

rm -f $INSTDIR/$FAUCET_SOCK

if [ -n "$local" ]; then
    using_faucet=$(cd faucet; git rev-list -n 1 `git describe --dirty`) || using_faucet=dev
    error_label="from local faucet/"
    echo Using local faucet version $using_faucet
else
    using_faucet=`docker inspect $IMAGE | jq -r .[0].Config.Labels.FAUCET_HASH`
    error_label="from image $IMAGE"

    expected_faucet=$(cat etc/FAUCET_VERSION)

    using_hash=`cd faucet; git rev-list -n 1 $using_faucet`
    expected_hash=`cd faucet; git rev-list -n 1 $expected_faucet`
    if [ "$using_hash" != "$expected_hash" ]; then
	echo Image faucet version does not match configuration.
	echo $using_hash $error_label $using_faucet
	echo $expected_hash from etc/FAUCET_VERSION $expected_faucet
	false
    fi
fi

if [ -n "$prom_pt" ]; then
    port_opts="-p $prom_pt:$PROM_TARGET"
    echo $prom_pt > $INSTDIR/PROM_PORT.$PROM_TARGET
fi

if [ -n "$gauge_prom_pt" ]; then
    port_opts+=" -p $gauge_prom_pt:$GAUGE_PROM_TARGET"
    echo $gauge_prom_pt > $INSTDIR/PROM_PORT.$GAUGE_PROM_TARGET
fi

forch_port="-p 500$faucet_id:9019"
docker_envs="--env RUN_MODE=$run_mode"

if [[ -n $vxlan ]]; then
    docker_ip=$(ip addr show docker0 | sed -nr 's~.*inet ([0-9.]+)/.*~\1~p')
    docker_envs+=" --env VXLAN_IP=$docker_ip"
fi

docker_volumes+="\
        -v $INSTDIR/faucet_br/faucet:/etc/faucet_br \
        -v $INSTDIR/faucet_br:/var/log/faucet_br \
        -v $INSTDIR/faucet:/etc/faucet \
        -v $INSTDIR:/var/log/faucet \
        -v $INSTDIR/forch:/etc/forch \
        -v $INSTDIR/daq/local:/root/daq/local \
        -v $INSTDIR/daq/inst:/root/daq/inst"

cid=$(docker run -d --privileged --name $CONTAINER \
             $docker_volumes $docker_envs \
             -p $ext_ofpt:6653 $forch_port $port_opts -p $gauge_ext_ofpt:6654 $IMAGE)

pid=$(docker inspect --format="{{ .State.Pid }}" $cid)

if [[ -z $vxlan ]]; then
    tap_intf_name=cntrl_tap_$faucet_id
    echo Creating tap interface $tap_intf_name for container pid $pid
    sudo ip link add $tap_intf_name type veth peer name data0 netns $pid
    sudo ip link set $tap_intf_name up
    docker exec $CONTAINER ip addr add 192.168.2.$faucet_id dev data0
    docker exec $CONTAINER ip link set data0 up
fi

echo Container $CONTAINER started as $cid

while [ ! -e $INSTDIR/$FAUCET_SOCK ]; do
    status=`docker inspect $CONTAINER | jq -r '.[0].State.Status'`
    if [ "$status" != running ]; then
       echo Docker container $CONTAINER not running, is $status
       false
    fi
    echo Waiting for $INSTDIR/$FAUCET_SOCK to exist...
    sleep 10
done
