#!/bin/bash -e

ROOT=$(dirname $0)/..
cd $ROOT
local=
devices=
switches=
skip_conn_check=
no_clean=
faux_dhcp=
fot=
vxlan=
no_test=
remote=
container=
base_port=6001
mode=bond

if [ "$1" == "local" ]; then
    local=local
    shift
fi

if [ "$1" == "devices" ]; then
    devices=$2
    shift 2
fi

if [ "$1" == "switches" ]; then
    switches=$2
    shift 2
fi

if [ "$1" == "remote" ]; then
    port=${2#*:}
    remote=${2%:*}
    base_port=${port:-$base_port}
    shift 2
fi

if [ "$1" == "skip-conn-check" ]; then
    skip_conn_check=y
    shift
fi

if [ "$1" == "dhcp" ]; then
    faux_dhcp=dhcp
    shift
fi

if [ "$1" == "no-clean" ]; then
    no_clean=y
    shift
fi

if [ "$1" == "no-test" ]; then
    no_test=no-test
    shift
fi

if [ "$1" == "fot" ]; then
    fot=fot
    shift
fi

if [ "$1" == "vxlan" ]; then
    vxlan=vxlan
    shift
fi

if [ "$1" == "dumptcp" ]; then
    dumptcp=y
    shift
fi

if [ -n "$1" ]; then
    mode=$1
    shift
elif [ -n "$fot" ]; then
    mode=fot
fi

rm -rf tcpdump # Clean out directory
source bin/stack_functions

###########################################################

if [ -z "$no_clean" ]; then
    bin/net_clean
fi

echo Configuring mode $mode...

add_br corp  0x111 6683
add_br t1sw1 177 $remote $base_port $((base_port + 1))
add_br t1sw2 178 $remote $base_port $((base_port + 1))
add_oeth t1sw1 28 corp-eth10
add_oeth t1sw2 28 corp-eth20
add_link t1sw1 6 t1sw2 6

add_br t2sw1 1295 $remote $base_port $((base_port + 1))
add_br t2sw2 1296 $remote $base_port $((base_port + 1))
add_br t2sw3 1297 $remote $base_port $((base_port + 1))

add_link t1sw1 9 t2sw1 50
add_link t1sw1 10 t2sw2 50
add_link t1sw1 11 t2sw3 50

add_link t1sw2 9 t2sw1 52
add_link t1sw2 10 t2sw2 52
add_link t1sw2 11 t2sw3 52

if [ -n "$switches" ]; then
    for snum in $(seq 4 $switches); do
        echo Adding extra switch num $snum
        add_br t2sw$snum $((1294 + snum)) $remote $base_port $((base_port + 1))
        add_link t1sw1 $((8+snum)) t2sw$snum 50
        add_link t1sw2 $((8+snum)) t2sw$snum 52
    done
fi

sudo ip link del bond || true
echo Setting up bond interface...
sudo ip link add bond type bond mode 802.3ad
sudo ip link set bond up
sudo ip link set corp-eth10 master bond
sudo ip link set corp-eth20 master bond
add_iface corp 10 bond

echo Starting faucet instances...
sudo rm -rf inst/
mkdir -p inst/forch-faucet-corp/faucet
setup_corp_faucet_config
docker kill forch-faucet-corp || true
sudo modprobe bonding
bin/run_faucet $local corp 6683

finst=1
if [ -z "$remote" ]; then
    if [ -n "$fot" ]; then
        container=forch-controller-$finst
    else
        container=forch-faucet-$finst
    fi

    container_inst=inst/$container/
    mkdir -p $container_inst/
    cp -r topo/common/forch $container_inst/
    cp -r topo/common/faucet $container_inst/

    cp topo/$mode/forch/* $container_inst/forch/
    cp topo/$mode/faucet/* $container_inst/faucet/
    docker kill $container || true

    if [ -n "$fot" ]; then
        mkdir -p $container_inst/faucet_br/faucet
        # TODO: faucet_br should not be under topo/ since it has nothing to do with the topology.
        cp -r topo/$mode/faucet_br/* $container_inst/faucet_br/faucet/
        bin/run_controller $local $no_test $vxlan $finst $((base_port + finst*2 - 2)) $((8000 + finst)) $((base_port + finst*2 - 1)) $((9000 + finst))
    else
        bin/run_faucet $local $finst $((base_port + finst*2 - 2)) $((8000 + finst))
        bin/run_faucet $local gauge $finst $((base_port + finst*2 - 1)) $((9000 + finst))
    fi
fi

echo Connecting upstream corp interface...
add_faux corp 1 0 dnsmasq

if [ -n "$vxlan" ]; then
    ipaddr=$(docker inspect --format="{{ .NetworkSettings.Networks.bridge.IPAddress }}" forch-controller-1)
    echo Connecting vxlan to $ipaddr
    add_vxlan t1sw1 4 $ipaddr
    do_tcpdump vxlan_sys_4789
    do_tcpdump docker0 udp port 4789
elif [ -z "$remote" ]; then
    echo Enabling tap interface cntrl_tap_1
    add_iface t1sw1 4 cntrl_tap_1
else
    echo Using remote controller connection
fi

echo Connecting faux interfaces...
add_faux t2sw1 1 1 $faux_dhcp
add_faux t2sw2 1 2 $faux_dhcp http
if [ -n "$fot" ]; then
    add_faux t2sw3 1 3 ping
    echo Connecting mirror hosts...
    # 121 and 122 refer to the mirror faux devices 1 and 2 connected to port 12
    add_faux t1sw1 12 121
    add_faux t1sw2 12 122
else
    add_faux t2sw3 1 3
fi

dcount=${devices:-3}
scount=${switches:-3}

if [ -n "$devices" ]; then
    for fnum in $(seq 4 $devices); do
        echo Adding extra device num $fnum
        add_faux t2sw1 $fnum $fnum
    done
fi

if [ -n "$switches" ]; then
    for snum in $(seq 4 $switches); do
        fnum=$((dcount+snum-3))
        echo Adding switch device num $fnum
        add_faux t2sw$snum 1 $fnum
    done
fi

tdevices=$((dcount + scount - 3))
echo Working with $tdevices devices.

echo Letting system settle...
sleep 20

if [ -z "$skip_conn_check" ]; then
    echo Starting connection warm-up...
    # Do faux-1 synchronously to prevent race condition with vid assignment.
    docker exec forch-faux-1 ping -q -c 10 $ip_faux_3 || true
    docker exec forch-faux-0 ping -q -c 10 $ip_faux_2 &
    docker exec forch-faux-2 ping -q -c 10 $ip_faux_1 &
    docker exec forch-faux-3 ping -q -c 10 $ip_faux_1 &

    echo Waiting for warm-ups to complete...
    wait

    echo Connection sanity check...
    docker exec forch-faux-0 ping -q -c 1 $ip_faux_2
    docker exec forch-faux-1 ping -q -c 1 $ip_faux_3
    docker exec forch-faux-2 ping -q -c 1 $ip_faux_1
    docker exec forch-faux-3 ping -q -c 1 $ip_faux_1

    if [ $tdevices -gt 3 ]; then
        for device in $(seq 4 $tdevices); do
            echo Checking forch-faux-$device...
            docker exec forch-faux-$device ping -q -c 1 192.168.1.0
        done
    fi
fi

if [ -z "$remote" ]; then
    if [ -n "$fot" ]; then
        echo head of forch-controller-1/faucet.log:
        head -n 50 inst/forch-controller-1/faucet.log
        echo head of forch-controller-1/forch.log:
        head -n 50 inst/forch-controller-1/forch.log
    else
        echo head of forch-faucet-1/faucet.log:
        head inst/forch-faucet-1/faucet.log
    fi
    echo
fi

if [ -n "$dumptcp" ]; then
    echo Launching tcpdumps...
    mkdir tcpdump
    echo -n > tcpdump/tcpdump.pids
    do_tcpdump bond
    for switch in t1sw1 t1sw2; do
        do_tcpdump $switch-eth6
        do_tcpdump $switch-eth28
        for port in 9 10 11 12 13 14 15 16 17 18; do
            do_tcpdump $switch-eth$port
        done
    done
fi

sleep 2

echo Done with stack setup mode $mode.
